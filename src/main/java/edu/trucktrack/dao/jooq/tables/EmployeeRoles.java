/*
 * This file is generated by jOOQ.
 */
package edu.trucktrack.dao.jooq.tables;


import edu.trucktrack.dao.jooq.Public;
import edu.trucktrack.dao.jooq.tables.records.EmployeeRolesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EmployeeRoles extends TableImpl<EmployeeRolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.employee_roles</code>
     */
    public static final EmployeeRoles EMPLOYEE_ROLES = new EmployeeRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRolesRecord> getRecordType() {
        return EmployeeRolesRecord.class;
    }

    /**
     * The column <code>public.employee_roles.employee_id</code>.
     */
    public final TableField<EmployeeRolesRecord, Integer> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.employee_roles.role_id</code>.
     */
    public final TableField<EmployeeRolesRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER, this, "");

    private EmployeeRoles(Name alias, Table<EmployeeRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeRoles(Name alias, Table<EmployeeRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.employee_roles</code> table reference
     */
    public EmployeeRoles(String alias) {
        this(DSL.name(alias), EMPLOYEE_ROLES);
    }

    /**
     * Create an aliased <code>public.employee_roles</code> table reference
     */
    public EmployeeRoles(Name alias) {
        this(alias, EMPLOYEE_ROLES);
    }

    /**
     * Create a <code>public.employee_roles</code> table reference
     */
    public EmployeeRoles() {
        this(DSL.name("employee_roles"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public EmployeeRoles as(String alias) {
        return new EmployeeRoles(DSL.name(alias), this);
    }

    @Override
    public EmployeeRoles as(Name alias) {
        return new EmployeeRoles(alias, this);
    }

    @Override
    public EmployeeRoles as(Table<?> alias) {
        return new EmployeeRoles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeRoles rename(String name) {
        return new EmployeeRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeRoles rename(Name name) {
        return new EmployeeRoles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeRoles rename(Table<?> name) {
        return new EmployeeRoles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
