/*
 * This file is generated by jOOQ.
 */
package edu.trucktrack.jooq.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import edu.trucktrack.jooq.Keys;
import edu.trucktrack.jooq.Public;
import edu.trucktrack.jooq.tables.record.WorkTripCargoHistoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class WorkTripCargoHistory extends TableImpl<WorkTripCargoHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.work_trip_cargo_history</code>
     */
    public static final WorkTripCargoHistory WORK_TRIP_CARGO_HISTORY = new WorkTripCargoHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkTripCargoHistoryRecord> getRecordType() {
        return WorkTripCargoHistoryRecord.class;
    }

    /**
     * The column <code>public.work_trip_cargo_history.id</code>.
     */
    public final TableField<WorkTripCargoHistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.work_trip_cargo_history.trip_id</code>.
     */
    public final TableField<WorkTripCargoHistoryRecord, Integer> TRIP_ID = createField(DSL.name("trip_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.work_trip_cargo_history.cargo_number</code>.
     */
    public final TableField<WorkTripCargoHistoryRecord, String> CARGO_NUMBER = createField(DSL.name("cargo_number"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.work_trip_cargo_history.cargo_name</code>.
     */
    public final TableField<WorkTripCargoHistoryRecord, String> CARGO_NAME = createField(DSL.name("cargo_name"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.work_trip_cargo_history.cargo_description</code>.
     */
    public final TableField<WorkTripCargoHistoryRecord, String> CARGO_DESCRIPTION = createField(DSL.name("cargo_description"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.work_trip_cargo_history.cargo_weight</code>.
     */
    public final TableField<WorkTripCargoHistoryRecord, Integer> CARGO_WEIGHT = createField(DSL.name("cargo_weight"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.work_trip_cargo_history.distance</code>.
     */
    public final TableField<WorkTripCargoHistoryRecord, Integer> DISTANCE = createField(DSL.name("distance"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.work_trip_cargo_history.delivered_at</code>.
     */
    public final TableField<WorkTripCargoHistoryRecord, LocalDateTime> DELIVERED_AT = createField(DSL.name("delivered_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.work_trip_cargo_history.created_at</code>.
     */
    public final TableField<WorkTripCargoHistoryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.inline("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private WorkTripCargoHistory(Name alias, Table<WorkTripCargoHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkTripCargoHistory(Name alias, Table<WorkTripCargoHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.work_trip_cargo_history</code> table
     * reference
     */
    public WorkTripCargoHistory(String alias) {
        this(DSL.name(alias), WORK_TRIP_CARGO_HISTORY);
    }

    /**
     * Create an aliased <code>public.work_trip_cargo_history</code> table
     * reference
     */
    public WorkTripCargoHistory(Name alias) {
        this(alias, WORK_TRIP_CARGO_HISTORY);
    }

    /**
     * Create a <code>public.work_trip_cargo_history</code> table reference
     */
    public WorkTripCargoHistory() {
        this(DSL.name("work_trip_cargo_history"), null);
    }

    public <O extends Record> WorkTripCargoHistory(Table<O> child, ForeignKey<O, WorkTripCargoHistoryRecord> key) {
        super(child, key, WORK_TRIP_CARGO_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<WorkTripCargoHistoryRecord, Long> getIdentity() {
        return (Identity<WorkTripCargoHistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkTripCargoHistoryRecord> getPrimaryKey() {
        return Keys.WORK_TRIP_CARGO_HISTORY_PKEY;
    }

    @Override
    public List<ForeignKey<WorkTripCargoHistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WORK_TRIP_CARGO_HISTORY__FK_CARGO_HISTORY_TRIP_ID);
    }

    private transient WorkTrip _workTrip;

    /**
     * Get the implicit join path to the <code>public.work_trip</code> table.
     */
    public WorkTrip workTrip() {
        if (_workTrip == null)
            _workTrip = new WorkTrip(this, Keys.WORK_TRIP_CARGO_HISTORY__FK_CARGO_HISTORY_TRIP_ID);

        return _workTrip;
    }

    @Override
    public WorkTripCargoHistory as(String alias) {
        return new WorkTripCargoHistory(DSL.name(alias), this);
    }

    @Override
    public WorkTripCargoHistory as(Name alias) {
        return new WorkTripCargoHistory(alias, this);
    }

    @Override
    public WorkTripCargoHistory as(Table<?> alias) {
        return new WorkTripCargoHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkTripCargoHistory rename(String name) {
        return new WorkTripCargoHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkTripCargoHistory rename(Name name) {
        return new WorkTripCargoHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkTripCargoHistory rename(Table<?> name) {
        return new WorkTripCargoHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, String, String, String, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
