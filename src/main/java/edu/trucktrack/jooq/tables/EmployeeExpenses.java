/*
 * This file is generated by jOOQ.
 */
package edu.trucktrack.jooq.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import edu.trucktrack.jooq.Indexes;
import edu.trucktrack.jooq.Keys;
import edu.trucktrack.jooq.Public;
import edu.trucktrack.jooq.tables.record.EmployeeExpensesRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EmployeeExpenses extends TableImpl<EmployeeExpensesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.employee_expenses</code>
     */
    public static final EmployeeExpenses EMPLOYEE_EXPENSES = new EmployeeExpenses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeExpensesRecord> getRecordType() {
        return EmployeeExpensesRecord.class;
    }

    /**
     * The column <code>public.employee_expenses.id</code>.
     */
    public final TableField<EmployeeExpensesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.employee_expenses.employee_id</code>.
     */
    public final TableField<EmployeeExpensesRecord, Integer> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employee_expenses.trip_id</code>.
     */
    public final TableField<EmployeeExpensesRecord, Integer> TRIP_ID = createField(DSL.name("trip_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employee_expenses.name</code>.
     */
    public final TableField<EmployeeExpensesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.employee_expenses.description</code>.
     */
    public final TableField<EmployeeExpensesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.employee_expenses.value</code>.
     */
    public final TableField<EmployeeExpensesRecord, Integer> VALUE = createField(DSL.name("value"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.employee_expenses.currency_id</code>.
     */
    public final TableField<EmployeeExpensesRecord, Integer> CURRENCY_ID = createField(DSL.name("currency_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.employee_expenses.created_at</code>.
     */
    public final TableField<EmployeeExpensesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.inline("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private EmployeeExpenses(Name alias, Table<EmployeeExpensesRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeExpenses(Name alias, Table<EmployeeExpensesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.employee_expenses</code> table reference
     */
    public EmployeeExpenses(String alias) {
        this(DSL.name(alias), EMPLOYEE_EXPENSES);
    }

    /**
     * Create an aliased <code>public.employee_expenses</code> table reference
     */
    public EmployeeExpenses(Name alias) {
        this(alias, EMPLOYEE_EXPENSES);
    }

    /**
     * Create a <code>public.employee_expenses</code> table reference
     */
    public EmployeeExpenses() {
        this(DSL.name("employee_expenses"), null);
    }

    public <O extends Record> EmployeeExpenses(Table<O> child, ForeignKey<O, EmployeeExpensesRecord> key) {
        super(child, key, EMPLOYEE_EXPENSES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_EMPLOYEE_EXPENSES_NAME, Indexes.IDX_EMPLOYEE_EXPENSES_SALARY);
    }

    @Override
    public Identity<EmployeeExpensesRecord, Long> getIdentity() {
        return (Identity<EmployeeExpensesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeeExpensesRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_EXPENSES_PKEY;
    }

    @Override
    public List<ForeignKey<EmployeeExpensesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EMPLOYEE_EXPENSES__FK_EMPLOYEE_EXPENSES_EMPLOYEE_ID, Keys.EMPLOYEE_EXPENSES__FK_EMPLOYEE_EXPENSES_TRIP_ID, Keys.EMPLOYEE_EXPENSES__FK_EMPLOYEE_EXPENSES_CURRENCY_ID);
    }

    private transient Employee _employee;
    private transient WorkTrip _workTrip;
    private transient Currency _currency;

    /**
     * Get the implicit join path to the <code>public.employee</code> table.
     */
    public Employee employee() {
        if (_employee == null)
            _employee = new Employee(this, Keys.EMPLOYEE_EXPENSES__FK_EMPLOYEE_EXPENSES_EMPLOYEE_ID);

        return _employee;
    }

    /**
     * Get the implicit join path to the <code>public.work_trip</code> table.
     */
    public WorkTrip workTrip() {
        if (_workTrip == null)
            _workTrip = new WorkTrip(this, Keys.EMPLOYEE_EXPENSES__FK_EMPLOYEE_EXPENSES_TRIP_ID);

        return _workTrip;
    }

    /**
     * Get the implicit join path to the <code>public.currency</code> table.
     */
    public Currency currency() {
        if (_currency == null)
            _currency = new Currency(this, Keys.EMPLOYEE_EXPENSES__FK_EMPLOYEE_EXPENSES_CURRENCY_ID);

        return _currency;
    }

    @Override
    public EmployeeExpenses as(String alias) {
        return new EmployeeExpenses(DSL.name(alias), this);
    }

    @Override
    public EmployeeExpenses as(Name alias) {
        return new EmployeeExpenses(alias, this);
    }

    @Override
    public EmployeeExpenses as(Table<?> alias) {
        return new EmployeeExpenses(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeExpenses rename(String name) {
        return new EmployeeExpenses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeExpenses rename(Name name) {
        return new EmployeeExpenses(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeExpenses rename(Table<?> name) {
        return new EmployeeExpenses(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, Integer, String, String, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super Integer, ? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super Integer, ? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
