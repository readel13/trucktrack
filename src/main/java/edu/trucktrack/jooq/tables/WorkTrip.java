/*
 * This file is generated by jOOQ.
 */
package edu.trucktrack.jooq.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import edu.trucktrack.jooq.Indexes;
import edu.trucktrack.jooq.Keys;
import edu.trucktrack.jooq.Public;
import edu.trucktrack.jooq.tables.record.WorkTripRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkTrip extends TableImpl<WorkTripRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.work_trip</code>
     */
    public static final WorkTrip WORK_TRIP = new WorkTrip();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkTripRecord> getRecordType() {
        return WorkTripRecord.class;
    }

    /**
     * The column <code>public.work_trip.id</code>.
     */
    public final TableField<WorkTripRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.work_trip.name</code>.
     */
    public final TableField<WorkTripRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.work_trip.description</code>.
     */
    public final TableField<WorkTripRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.work_trip.employee_id</code>.
     */
    public final TableField<WorkTripRecord, Integer> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.work_trip.truck_id</code>.
     */
    public final TableField<WorkTripRecord, Integer> TRUCK_ID = createField(DSL.name("truck_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.work_trip.salary</code>.
     */
    public final TableField<WorkTripRecord, Integer> SALARY = createField(DSL.name("salary"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.work_trip.currency_id</code>.
     */
    public final TableField<WorkTripRecord, Integer> CURRENCY_ID = createField(DSL.name("currency_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.work_trip.active</code>.
     */
    public final TableField<WorkTripRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.work_trip.closed_at</code>.
     */
    public final TableField<WorkTripRecord, LocalDateTime> CLOSED_AT = createField(DSL.name("closed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.work_trip.created_at</code>.
     */
    public final TableField<WorkTripRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.inline("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private WorkTrip(Name alias, Table<WorkTripRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkTrip(Name alias, Table<WorkTripRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.work_trip</code> table reference
     */
    public WorkTrip(String alias) {
        this(DSL.name(alias), WORK_TRIP);
    }

    /**
     * Create an aliased <code>public.work_trip</code> table reference
     */
    public WorkTrip(Name alias) {
        this(alias, WORK_TRIP);
    }

    /**
     * Create a <code>public.work_trip</code> table reference
     */
    public WorkTrip() {
        this(DSL.name("work_trip"), null);
    }

    public <O extends Record> WorkTrip(Table<O> child, ForeignKey<O, WorkTripRecord> key) {
        super(child, key, WORK_TRIP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_WORK_TRIP_CLOSED_AT, Indexes.IDX_WORK_TRIP_NAME, Indexes.IDX_WORK_TRIP_SALARY);
    }

    @Override
    public Identity<WorkTripRecord, Long> getIdentity() {
        return (Identity<WorkTripRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkTripRecord> getPrimaryKey() {
        return Keys.WORK_TRIP_PKEY;
    }

    @Override
    public List<ForeignKey<WorkTripRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WORK_TRIP__FK_WORK_TRIP_EMPLOYEE_ID, Keys.WORK_TRIP__FK_WORK_TRIP_CURRENCY_ID, Keys.WORK_TRIP__FK_WORK_TRIP_TRUCK_ID);
    }

    private transient Employee _employee;
    private transient Currency _currency;
    private transient Truck _truck;

    /**
     * Get the implicit join path to the <code>public.employee</code> table.
     */
    public Employee employee() {
        if (_employee == null)
            _employee = new Employee(this, Keys.WORK_TRIP__FK_WORK_TRIP_EMPLOYEE_ID);

        return _employee;
    }

    /**
     * Get the implicit join path to the <code>public.currency</code> table.
     */
    public Currency currency() {
        if (_currency == null)
            _currency = new Currency(this, Keys.WORK_TRIP__FK_WORK_TRIP_CURRENCY_ID);

        return _currency;
    }

    /**
     * Get the implicit join path to the <code>public.truck</code> table.
     */
    public Truck truck() {
        if (_truck == null)
            _truck = new Truck(this, Keys.WORK_TRIP__FK_WORK_TRIP_TRUCK_ID);

        return _truck;
    }

    @Override
    public WorkTrip as(String alias) {
        return new WorkTrip(DSL.name(alias), this);
    }

    @Override
    public WorkTrip as(Name alias) {
        return new WorkTrip(alias, this);
    }

    @Override
    public WorkTrip as(Table<?> alias) {
        return new WorkTrip(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkTrip rename(String name) {
        return new WorkTrip(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkTrip rename(Name name) {
        return new WorkTrip(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkTrip rename(Table<?> name) {
        return new WorkTrip(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, Integer, Integer, Integer, Integer, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
